Assignment 10:-

> mysql -u root -p

> create database ten;

> show databases;

> use ten;
> create table students(
-> id int NOT NULL AUTO_INCREMENT,
-> name varchar(45) NOT NULL,
-> class int NOT NULL,
-> email_id varchar(65) NOT NULL,
-> PRIMARY KEY (id));

> show tables;
> desc students;

> INSERT INTO students (name, class, email_id)
-> VALUES ('Stephen', 6, 'stephen@gamil.com'),
-> ('Bob', 7, 'bob@gmail.com'),
-> ('Steven', 8, 'steven@gmail.com'),
-> ('Alexandar', 7, 'alexandar@gmail.com');

> select * from students;
> create table students_log(
-> user varchar(45) NOT NULL,
-> descreptions varchar(65) NOT NULL);

> desc students_log;

> DELIMITER $$
> CREATE TRIGGER after_update_studentsInfo
-> AFTER UPDATE
-> ON students FOR EACH ROW
-> BEGIN
-> INSERT into students_log VALUES (user(),
-> CONCAT('Update Student Record ', OLD.name, ' Previous Class :',
-> OLD.class, ' Present Class ', NEW.class));
-> END $$

> UPDATE students SET class = class + 1;
-> $$
> select * from students;
-> $$
> select * from students_log;
-> $$




/*


Certainly! Here's an explanation of the SQL commands you provided:

1. `mysql -u root -p`: This is the command to log in to MySQL as the root user. You will be prompted to enter your password.

2. `create database ten;`: This command creates a new database named "ten".

3. `show databases;`: This command displays a list of all databases on the MySQL server. You should now see the "ten" database in the output.

4. `use ten;`: This statement selects the "ten" database for use in subsequent queries.

5. `create table students...`: This command creates a table named "students" within the "ten" database. The table has five columns: "id" (integer, auto-incremented), "name" (varchar), "class" (integer), and "email_id" (varchar). The "id" column is defined as the primary key.

6. `show tables;`: This command lists all tables in the current database. You should now see the "students" table in the output.

7. `desc students;`: This command provides the description or structure of the "students" table, displaying the column names, data types, and any constraints.

8. `INSERT INTO students...`: This command inserts multiple rows of data into the "students" table. Each row represents a student with a name, class, and email ID.

9. `select * from students;`: This query retrieves all rows from the "students" table and displays the result.

10. `create table students_log...`: This command creates another table named "students_log" within the "ten" database. It has two columns: "user" (varchar) and "descriptions" (varchar). This table is intended to store log entries.

11. `desc students_log;`: This command describes the structure of the "students_log" table, similar to step 7.

12. `DELIMITER $$`: This statement changes the delimiter to "$$" so that you can define the trigger.

13. `CREATE TRIGGER after_update_studentsInfo...`: This block of code defines a trigger named "after_update_studentsInfo". It specifies that the trigger should execute after an update operation on the "students" table. The trigger inserts a log entry into the "students_log" table, capturing the user, the previous class, and the present class.

14. `UPDATE students SET class = class + 1; $$`: This command updates the "class" column of all rows in the "students" table by incrementing the existing class value by 1. The double "$$" signifies the end of the SQL statement.

15. `select * from students; $$`: This query retrieves all rows from the "students" table again and displays the result. The double "$$" signifies the end of the SQL statement.

16. `select * from students_log; $$`: This query retrieves all rows from the "students_log" table and displays the result. The double "$$" signifies the end of the SQL statement.

That's the explanation of the SQL commands you provided. Let me know if you have any further questions!


*/

